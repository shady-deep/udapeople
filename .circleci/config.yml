version: 2.1
commands:
    installawscli:
      description: install awscli
      steps:
        - run :
            name: install awscli v2 
            command: |
               curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
               unzip awscliv2.zip
               sudo ./aws/install

    installansible:
      description: install ansible
      steps:
        - run :
            name: install ansible
            command: |
                sudo apt update
                sudo apt install software-properties-common
                sudo add-apt-repository --yes --update ppa:ansible/ansible
                sudo apt install ansible
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend                    
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end Unit test
          command: |
             cd frontend
             npm install
             npm test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Unit test
          command: |
             cd backend
             npm install
             npm test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
             cd frontend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - installawscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLECI_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLECI_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances
              --filters "Name=tag:Name,Values=backend-${CIRCLECI_WORKFLOW_ID:0:7}" \
              --query 'Reservation[*].Instances[*].Publicipaddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
 
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend 
      - test-frontend:
          requires:
            - "build-frontend"
      - test-backend:
          requires:
            - "build-backend"
      - scan-frontend:
          requires:
            - "build-frontend"
      - scan-backend:
          requires:
            - "build-backend"
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]